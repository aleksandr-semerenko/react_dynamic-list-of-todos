{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","value","status","this","props","todos","selectedUserId","onUserIdSelected","filterTodos","filter","todo","title","includes","completed","className","onChange","event","setState","target","map","key","id","classNames","TodoList__item","type","checked","readOnly","button","userId","onClick","Component","request","url","fetch","then","response","json","serverResponse","data","CurrentUser","user","loadUser","prevProps","name","email","phone","App","clearUser","selecteUserId","length","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20f7eebd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport './TodoList.scss';\n\nexport class TodoList extends Component {\n  state = {\n    value: '',\n    status: 'all',\n  }\n\n  render() {\n    const { value, status } = this.state;\n    const { todos, selectedUserId, onUserIdSelected } = this.props;\n\n    const filterByTitle = (event) => {\n      this.setState({\n        value: event.target.value,\n      });\n    };\n\n    const filterByCompleteStatus = (event) => {\n      this.setState({\n        status: event.target.value,\n      });\n    };\n\n    const filterTodos = todos\n      .filter(todo => todo.title && todo.title.includes(value))\n      .filter((todo) => {\n        switch (status) {\n          case 'completed':\n            return todo.completed;\n\n          case 'in process':\n            return !todo.completed;\n\n          default:\n            return todo;\n        }\n      });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <p>Filter by title:</p>\n        <input\n          className=\"input\"\n          value={value}\n          onChange={filterByTitle}\n        />\n        <p>Status</p>\n        <select\n          value={status}\n          onChange={filterByCompleteStatus}\n        >\n          <option value=\"all\">\n            all\n          </option>\n          <option value=\"completed\">\n            completed\n          </option>\n          <option value=\"in process\">\n            in process\n          </option>\n        </select>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filterTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames({\n                  TodoList__item: true,\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n              >\n                <label>\n                  <input type=\"checkbox\" checked={todo.completed} readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  type=\"button\"\n                  className={classNames({\n                    'TodoList__user-button': true,\n                    button: true,\n                    'TodoList__user-button--selected':\n                      selectedUserId === todo.userId,\n                  })}\n                  onClick={() => onUserIdSelected(todo.userId)}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  onUserIdSelected: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      title: PropTypes.string.isRequired,\n      userId: PropTypes.number.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = url => fetch(`${BASE_URL}${url}`)\n  .then(response => response.json())\n  .then(serverResponse => serverResponse.data || serverResponse);\n\nexport const getTodos = () => request('/todos');\nexport const getUsers = userId => request(`/users/${userId}`);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { getUsers } from '../../api';\n\nexport class CurrentUser extends Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId === this.props.userId) {\n      return;\n    }\n\n    this.loadUser();\n  }\n\n  loadUser() {\n    getUsers(this.props.userId)\n      .then((user) => {\n        this.setState({\n          user,\n        });\n      });\n  }\n\n  render() {\n    const { userId, onClick } = this.props;\n    const { user } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {userId}\n          </span>\n        </h2>\n        {!user ? (\n          <p>Loading...</p>\n        ) : (\n          <>\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={onClick}\n            >\n              Clear\n            </button>\n          </>\n        )}\n\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({\n          todos,\n        });\n      });\n  }\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  selecteUserId = (userId) => {\n    this.setState({ selectedUserId: userId });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n    const { clearUser, selecteUserId } = this;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {this.state.todos.length !== 0\n            ? (\n              <TodoList\n                todos={todos}\n                selectedUserId={selectedUserId}\n                onUserIdSelected={selecteUserId}\n              />\n            )\n            : 'Loadind...'\n          }\n\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onClick={clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}