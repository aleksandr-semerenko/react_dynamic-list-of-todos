{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","todos","status","value","filterByCompleteStatus","filterByTitle","onUserIdSelected","selectedUserId","className","onChange","map","todo","key","id","classNames","TodoList__item","completed","type","checked","readOnly","title","button","userId","onClick","request","url","fetch","then","response","json","serverResponse","data","CurrentUser","state","user","this","loadUser","prevProps","props","setState","name","email","phone","Component","App","event","target","filterTodos","result","filter","includes","clearUser","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f958944a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport './TodoList.scss';\n\nexport const TodoList = ({\n  todos,\n  status,\n  value,\n  filterByCompleteStatus,\n  filterByTitle,\n  onUserIdSelected,\n  selectedUserId,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <p>Filter by title:</p>\n    <input\n      className=\"input\"\n      value={value}\n      onChange={filterByTitle}\n    />\n    <p>Status</p>\n    <select\n      value={status}\n      onChange={filterByCompleteStatus}\n    >\n      <option value=\"all\">\n        all\n      </option>\n      <option value=\"completed\">\n        completed\n      </option>\n      <option value=\"in process\">\n        in process\n      </option>\n    </select>\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames({\n              TodoList__item: true,\n              'TodoList__item--checked': todo.completed,\n              'TodoList__item--unchecked': !todo.completed,\n            })}\n          >\n            <label>\n              <input type=\"checkbox\" checked={todo.completed} readOnly />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              type=\"button\"\n              className={classNames({\n                'TodoList__user-button': true,\n                button: true,\n                'TodoList__user-button--selected':\n                  selectedUserId === todo.userId,\n              })}\n              onClick={() => onUserIdSelected(todo.userId)}\n            >\n              User&nbsp;#\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  status: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  filterByTitle: PropTypes.func.isRequired,\n  filterByCompleteStatus: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  onUserIdSelected: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      title: PropTypes.string.isRequired,\n      userId: PropTypes.number.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = url => fetch(`${BASE_URL}${url}`)\n  .then(response => response.json())\n  .then(serverResponse => serverResponse.data || serverResponse);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { request } from '../../api';\n\nexport class CurrentUser extends Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId === this.props.userId) {\n      return;\n    }\n\n    this.loadUser();\n  }\n\n  loadUser() {\n    request(`/users/${this.props.userId}`)\n      .then((user) => {\n        this.setState({\n          user,\n        });\n      });\n  }\n\n  render() {\n    const { userId, onClick } = this.props;\n    const { user } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {userId}\n          </span>\n        </h2>\n        {!user ? (\n          <p>Loading...</p>\n        ) : (\n          <>\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={onClick}\n            >\n              Clear\n            </button>\n          </>\n        )}\n\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { request } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    value: '',\n    status: 'all',\n  };\n\n  componentDidMount() {\n    request('/todos')\n      .then((todos) => {\n        this.setState({\n          todos,\n        });\n      });\n  }\n\n  filterByTitle = (event) => {\n    this.setState({\n      value: event.target.value,\n    });\n  }\n\n  filterByCompleteStatus = (event) => {\n    this.setState({\n      status: event.target.value,\n    });\n  }\n\n  filterTodos = (todos) => {\n    const { value, status } = this.state;\n    let result = [...todos];\n\n    if (status === 'completed') {\n      result = todos.filter(todo => todo.completed);\n    }\n\n    if (status === 'in process') {\n      result = todos.filter(todo => !todo.completed);\n    }\n\n    if (value !== '') {\n      result = result.filter(todo => todo.title\n        && todo.title.includes(value));\n    }\n\n    return result;\n  }\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId, status, value } = this.state;\n    const {\n      clearUser,\n      filterByCompleteStatus,\n      filterByTitle,\n      filterTodos,\n    } = this;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={filterTodos(todos)}\n            status={status}\n            value={value}\n            filterByCompleteStatus={filterByCompleteStatus}\n            filterByTitle={filterByTitle}\n            selectedUserId={selectedUserId}\n            onUserIdSelected={(userId) => {\n              this.setState({ selectedUserId: userId });\n            }}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onClick={clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}